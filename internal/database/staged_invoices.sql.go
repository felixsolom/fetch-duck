// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: staged_invoices.sql

package database

import (
	"context"
	"database/sql"
)

const createStagedInvoice = `-- name: CreateStagedInvoice :one
INSERT INTO staged_invoices (
    id,
    user_id,
    gmail_message_id,
    gmail_thread_id,
    sender,
    subject,
    snippet,
    has_attachment,
    received_at,
    created_at,
    updated_at
) VALUES (
    ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
)
RETURNING id, user_id, gmail_message_id, gmail_thread_id, text, status, sender, subject, snippet, has_attachment, received_at, created_at, updated_at
`

type CreateStagedInvoiceParams struct {
	ID             string
	UserID         string
	GmailMessageID string
	GmailThreadID  interface{}
	Sender         string
	Subject        string
	Snippet        sql.NullString
	HasAttachment  bool
	ReceivedAt     int64
	CreatedAt      int64
	UpdatedAt      int64
}

func (q *Queries) CreateStagedInvoice(ctx context.Context, arg CreateStagedInvoiceParams) (StagedInvoice, error) {
	row := q.db.QueryRowContext(ctx, createStagedInvoice,
		arg.ID,
		arg.UserID,
		arg.GmailMessageID,
		arg.GmailThreadID,
		arg.Sender,
		arg.Subject,
		arg.Snippet,
		arg.HasAttachment,
		arg.ReceivedAt,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i StagedInvoice
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.GmailMessageID,
		&i.GmailThreadID,
		&i.Text,
		&i.Status,
		&i.Sender,
		&i.Subject,
		&i.Snippet,
		&i.HasAttachment,
		&i.ReceivedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getStagedInvoice = `-- name: GetStagedInvoice :one

SELECT id, user_id, gmail_message_id, gmail_thread_id, text, status, sender, subject, snippet, has_attachment, received_at, created_at, updated_at FROM staged_invoices
WHERE id = ? AND user_id = ?
`

type GetStagedInvoiceParams struct {
	ID     string
	UserID string
}

func (q *Queries) GetStagedInvoice(ctx context.Context, arg GetStagedInvoiceParams) (StagedInvoice, error) {
	row := q.db.QueryRowContext(ctx, getStagedInvoice, arg.ID, arg.UserID)
	var i StagedInvoice
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.GmailMessageID,
		&i.GmailThreadID,
		&i.Text,
		&i.Status,
		&i.Sender,
		&i.Subject,
		&i.Snippet,
		&i.HasAttachment,
		&i.ReceivedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listStagedInvoicesByUser = `-- name: ListStagedInvoicesByUser :many

SELECT id, user_id, gmail_message_id, gmail_thread_id, text, status, sender, subject, snippet, has_attachment, received_at, created_at, updated_at FROM staged_invoices
WHERE 
    user_id = ? 
    AND status = 'pending_review'
    AND received_at >= ?
    AND received_at <= ?
    ORDER BY received_at DESC
LIMIT ?
OFFSET ?
`

type ListStagedInvoicesByUserParams struct {
	UserID       string
	ReceivedAt   int64
	ReceivedAt_2 int64
	Limit        int64
	Offset       int64
}

func (q *Queries) ListStagedInvoicesByUser(ctx context.Context, arg ListStagedInvoicesByUserParams) ([]StagedInvoice, error) {
	rows, err := q.db.QueryContext(ctx, listStagedInvoicesByUser,
		arg.UserID,
		arg.ReceivedAt,
		arg.ReceivedAt_2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []StagedInvoice
	for rows.Next() {
		var i StagedInvoice
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.GmailMessageID,
			&i.GmailThreadID,
			&i.Text,
			&i.Status,
			&i.Sender,
			&i.Subject,
			&i.Snippet,
			&i.HasAttachment,
			&i.ReceivedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStagedInvoiceStatus = `-- name: UpdateStagedInvoiceStatus :exec

UPDATE staged_invoices
SET status = ?, updated_at = ?
WHERE id = ? AND user_id = ?
`

type UpdateStagedInvoiceStatusParams struct {
	Status    string
	UpdatedAt int64
	ID        string
	UserID    string
}

func (q *Queries) UpdateStagedInvoiceStatus(ctx context.Context, arg UpdateStagedInvoiceStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateStagedInvoiceStatus,
		arg.Status,
		arg.UpdatedAt,
		arg.ID,
		arg.UserID,
	)
	return err
}
