// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: sessions.sql

package database

import (
	"context"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (
    token, user_id, expiry, created_at
) VALUES (
    ?, ?, ?, ?
) RETURNING token, user_id, expiry, created_at
`

type CreateSessionParams struct {
	Token     string
	UserID    string
	Expiry    int64
	CreatedAt int64
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession,
		arg.Token,
		arg.UserID,
		arg.Expiry,
		arg.CreatedAt,
	)
	var i Session
	err := row.Scan(
		&i.Token,
		&i.UserID,
		&i.Expiry,
		&i.CreatedAt,
	)
	return i, err
}

const getUserBySessionToken = `-- name: GetUserBySessionToken :one

SELECT users.id, users.created_at, users.updated_at, users.email FROM users
JOIN sessions ON users.id = sessions.user_id
WHERE sessions.token = ? AND sessions.expiry > ?
`

type GetUserBySessionTokenParams struct {
	Token  string
	Expiry int64
}

func (q *Queries) GetUserBySessionToken(ctx context.Context, arg GetUserBySessionTokenParams) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserBySessionToken, arg.Token, arg.Expiry)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
	)
	return i, err
}
