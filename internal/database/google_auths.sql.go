// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: google_auths.sql

package database

import (
	"context"
)

const getGoogleAuthByUserID = `-- name: GetGoogleAuthByUserID :one
SELECT user_id, access_token, refresh_token, token_expiry, created_at, updated_at 
FROM google_auths
WHERE user_id = ?
`

type GetGoogleAuthByUserIDRow struct {
	UserID       string
	AccessToken  string
	RefreshToken string
	TokenExpiry  int64
	CreatedAt    int64
	UpdatedAt    int64
}

func (q *Queries) GetGoogleAuthByUserID(ctx context.Context, userID string) (GetGoogleAuthByUserIDRow, error) {
	row := q.db.QueryRowContext(ctx, getGoogleAuthByUserID, userID)
	var i GetGoogleAuthByUserIDRow
	err := row.Scan(
		&i.UserID,
		&i.AccessToken,
		&i.RefreshToken,
		&i.TokenExpiry,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const upsertGoogleAuth = `-- name: UpsertGoogleAuth :exec

INSERT INTO google_auths(
    user_id,
    access_token,
    refresh_token,
    token_expiry,
    created_at,
    updated_at
) VALUES (
    ?, ?, ?, ?, ?, ?
) 
ON CONFLICT(user_id) DO UPDATE SET 
    access_token = excluded.access_token,
    refresh_token = excluded.refresh_token,
    token_expiry = excluded.token_expiry,
    updated_at = excluded.updated_at
`

type UpsertGoogleAuthParams struct {
	UserID       string
	AccessToken  string
	RefreshToken string
	TokenExpiry  int64
	CreatedAt    int64
	UpdatedAt    int64
}

func (q *Queries) UpsertGoogleAuth(ctx context.Context, arg UpsertGoogleAuthParams) error {
	_, err := q.db.ExecContext(ctx, upsertGoogleAuth,
		arg.UserID,
		arg.AccessToken,
		arg.RefreshToken,
		arg.TokenExpiry,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}
